========APRENDENDO GIT =====================
	Working Directory => Staging Area => Git Directory
	              (git add)          (git commit)
	working directory, index e HEAD

	- Configurações Iniciais
		Global
	 		git config --global user.name "Caio Andrade"
	 		git config --global user.email "caioandradedesousa@gmail.com"
	 	Local
 			git config user.name "Caio Andrade"
			git config user.email "caioandradedesousa@gmail.com"

 	- Criar repositório local
 		git init

 	- Criar repositório compartilhado
 		git init --bare

 	- Consultar status do repositório
 		git status

 	- Trackear arquivo
 		git add nome_arquivo.extensão
 		OU
		git add . (Todos os arquivos)
		OU
		git add *.txt (Todos os arquivos com .txt)
		OU
		git add -i (Modo iterativo)

	- Trackear arquivo de forma interativa
		git add -i

	- Trackear arquivo declarado no .gitignore
		git add nome_do_arquivo -f

	- Remover arquivo
		git rm arquivo.txt

	- Ignorar arquivo
		.gitignore
			Conteúdo:
				.gitignore
				arquivo_ignorado1.txt
				arquivo_ignorado1.txt

 	- Realizar Commit
 		git commit -m "Commit Inicial"

 	- Trackear e Commitar em conjunto(Só funciona para arquivos já conhecidos pelo GIT)
 		git commit -a -m "Commit com track"

 	- Consultar log de alterações
 		git diff (Arquivos do working)
 		git diff --staged (Arquivo da staging area)

 	- Consultar log de Commit's
 		git log (Log Genérico de todos os commits)
 		git log -p (Log Especifico de todos os commits, uma junção entre git log e git diff)
 		git log --stat (Idem ao acima, porém com menos detalhes)
 		git log -p -1 (Parametro após o p indica a quantidade de log de commits, nesse caso será exibido o último commit)

 		gitk (abre uma interface com os relatórios de commits)

 		git log --pretty=oneline (Mostra somente as mensagens dos logs com a sua chave)
 		git log --pretty='%an realizou o commit %h: %s' (git log customizado)
 		git log --graph (Mostra o log com a ramificação)

 		OBS: Ao aparecer vários logs pressionar a TECLA "Q", para digitar novos comandos.

 		git whatchanged ( visualizar quais as linhas que foram modificadas em cada commit do nosso projeto)

 		git whatchanged -p

 	- Alterar um commit sem gerar outro 
 		git add .
 		git commit --amend -m "Commit Errado(CONSERTADO)"

 	- Reverter mudanças feitas no arquivo do Working Directory
 		git checkout -- arquivo_teste.txt
		
	- Reverter arquivo da forma como está em uma branch especificada, nesse caso está revertendo o arquivo para a forma como estava na branch master
		git checkout master -- arquivo.php

 	- Retirar arquivo do Staging Area após o add
 		git reset HEAD arquivo_teste.txt

 	- Exclui o ultimo commit
 		git reset HEAD~1 --hard

 	- Desfaz o ultimo commit, porém deixa as modificações na Staging Area
 		git reset HEAD~1 --soft

	- Retorna os arquivos modificados para a Working Directory
 		git reset HEAD

 	- Retira todos os arquivos da Working Directory (OBS: Que não sejam conhecidos pelo GIT)
 		git clean -f

 	- Visualizar operações destrutivas realizadas
 		git reflog

 	- Inserir novamente no branch um commit excluido
 		git merge ("hash do commit") 

 	- Para corrigir arquivos com erros sem afetar o branch
		git stash(Primeiramente os arquivos precisam estar na Staging Area)
		
		Logo após corrigidos realizar
		git stath apply

		Para Limpar o stash
		git stash clear

	- Tornar o branch atual o ultimo da historia e atualizado de acordo com o que há de novo no master
		git rebase master

 	- Criar uma tag (Realease)
 		git tag -a v1.0 -m "Versao 1.0" (Essa tag é referente ao ponto atual do branch master)
 		git tag -a v0.0 fba4acec2ca9b4f642a013241f3afc7d387a343b -m "Versao 0.0" (Essa tag é referente ao commit passado por parametro após o v0.0)

 	- Mostrar todas as tag
 		git tag

 	- Exibir detalhes de uma tag
 		git show v0.0
 				  (nome da tag)

 	- Ir para a tag(realease)
 		git checkout v0.0

 	- Deletar uma tag
 		git tag -t v0.0

 	- Ir para o branch master
 		git checkout master

 	- Criar um branch
 		git branch nomeDoBranch

 	- Ir para o branch 
 		git checkout nomeDoBranch

 	- Listar branches
 		git branch (Lista branches locais)
 		git branch -d nomeDoBranch (Excluir branch)
 		git branch -r (Lista branches remotas)
 		git branch -a (locais e remotas)
 		git push origin :design (Deletar branch remota)
 
 	- Criar e ir para o branch
 		git checkout -b nomeDoBranch

 	- Listar todos os branchs
 		git branch

 	- Realizar o merge
 		git merge nomeDoBranch

 	- Criar endereço ssh na maquina local
 		ssh-keygen

 	- Enviar do repositório local para o repositório nas nuvens
 		git push origin master
 						(ou nome do branch)
 		git push -u origin master (primeiro push, depois é só executar git push)

 	- Atualizar o repositório local de acordo com o repositório nas nuvens
 		git pull origin master

 	- Traz atualizações de um repositório remoto
 		git fetch nomeServidorRemoto

 	- Nome do servidor
 		git remote (Por padrão é origin)

 	- Para dar um pull quando há conflitos
 		git pull origin master --allow-unrelated-histories

 	- Criar alias git
 		vim ~/.gitconfig
 			[alias]
 				st = status (git st fica igual git status)
 				envia = !git pull && git push
 				publica = !git checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git push
 			por linha de comando
 				git config --global alias.r reset

 			Personalização
 				[color] (Deixar visualização de branches colorida)
    				branch = auto ou branch = true ou branch = on ou branch = 1
				
	- Configurar aliases de forma global para ignorar arquivos localmente
		* git config --global alias.ignore 'update-index --skip-worktree'
		* git config --global alias.unignore 'update-index --no-skip-worktree'
		* git config --global alias.ignored '!git ls-files -v | grep "^S"'
		
		git ignore
			Ignora arquivos localmente
		git unignore
			Desfaz o comando 'git ignore' e faz com o git volte a reconhecer as alterações do arquivo
		git ignored
			Retorna a lista de todos os arquivos ignorados localmente
